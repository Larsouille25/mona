(* 
This is an example code of Zom Code It is not very 
usefull but that shows how it WILL probably work
 *)

(* By default the std library is not imported, so you need to import what you want from the std lib. *)
const stdio = @include("std.stdio.*");

(* A function that could return an error *)
func foo(bar: int) double ?! Error {
    var x: int = (10 + 9) * bar;

    if x >= 5 && is_greater_than(1, 2) {
        printf("x is greater than 5");
        return 1.3;
    }

    return Error.new("Error occurs", 1)!;
}

func main() void {
    (* functions that returns Error with the `?!` operator can be call with the `try`
       keyword, if there is no error, the expression is return but if there is an error,
       the error is propagate. So the calling function needs also to have a return error, 
       with the same type. In this case `func main() void ?! Error`.*)
    var test: double = try foo(9);
}

func is_greater_than(a: int, b: int) bool {
    (* It's a really dumb function but it's for demonstration of constant.language.values.zom *)
    if a > b {
        return true;
    }else {
        return false;
    }
}

(* Structs are declared like that. And this function as a visibility of public, because there is `pub:`
   before the declaration of the struct.  *)
pub: const Error = struct {
    name: string,
    code: uint,

    func new(name: string, err_code: uint) Error {
        Error {
            name,
            code = err_code,
        }
    }
}

(* You can append structs, but you can only add child or functions,
   It can be used to inheritance, add function to a type in a library.
   You can only append structs that can be in your scope. 
   Because there is `pub:` before you append it. *)
pub: Error += struct {
    @child.Display: struct {
        func fmt(&self) string {
            (*                  |  here, the as() fuction takes a type in parameter and try to cast the type,
                                |  from uint to string, because it's at compile-time, you will have a compile 
                                V  error, if that doesn't work. (NOT ACTUALLY SURE ABOUT THAT)*)
            self.name + self.code.as(string)
        }
    }
}

(* this the declaration of an enum, you can add a public visibility with `pub:`,
   you can specify the type of the ordinal value, it can only be an integer litteral (sbyte, short, int, long, ubyte, ushort, uint, ulong)
   you can override the ordinal value for an enum (like Success, Failure or FileNotFound)
   or you can let the compiler choose for you (like UnknownFile) *)
pub: const ExitStatus = enum: ubyte {
    Success = 0,
    Failure = 1,
    FileNotFound = 100,
    UnknownFile,
}

(* You can declare unions. It's kinda like enums but it can store memory. 
   The size of an union is the size of the largest thing it stores. *)
pub: const Token = union {
    (* Union can have zero type stores, like that, *)
    RParen,
    LParen,
    (* Or a single type *)
    Op = string,
    (* Or a struct. *)
    BinaryOp = struct {
        left: ubyte,
        op: string,
        right: ubyte,
    },
    (* Or an enum *)
    Status = enum {
        Ok,
        Warning,
        Bad,
        Failure,
        Critical,
    }
}